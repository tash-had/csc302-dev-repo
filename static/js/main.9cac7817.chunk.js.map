{"version":3,"sources":["components/QuestionComponent.tsx","components/FormComponent.tsx","helpers/http.ts","constants/Constants.ts","components/Form.tsx","App.tsx","helpers/QuestionMapper.ts","components/FormResponse.tsx","FilledForms.tsx","FormUpload.tsx","serviceWorker.ts","index.tsx"],"names":["QuestionComponent","props","_radioButtons","getAnswer","state","answer","renderMultipleChoice","renderedChoices","choices","forEach","choice","key","push","className","ref","c","type","value","onChange","onRadioButtonSelect","renderInputField","onTextFieldChange","event","button","target","checked","qID","setState","response_type","this","title","multipleChoice","response","children","React","Component","defaultProps","controlQID","FormComponent","_questions","findControlQuestion","controlData","questionData","data","qid","buildForm","questions","control_qid","question","multiple_choice","list_field","getAnswers","answerObjs","answers","HTTPHelper","url","fetch","json","console","error","postBody","myHeaders","Headers","append","headers","method","body","JSON","stringify","file","Constants","Form","_formJSX","_formRefs","componentWillMount","formBody","formData","log","length","sections","section","generateForm","form","ret","id","toString","patientID","Date","getTime","version","submitFormHandler","a","preventDefault","SERVER_URL","postJSON","status","alert","responseBody","response_id","window","location","reload","sectionData","patientIDHandler","onSubmit","required","App","handleFormIDInput","formID","showForm","getFormButtonHandler","formURL","get","message","showFormIDInput","placeholder","onClick","handleNavigationButtons","buttonLabel","URLS","redirectURL","to","QuestionMapper","getForm","mapping","Object","assign","sectionMapper","FormResponse","renderResponses","formResponse","_textComponents","child","questionMapping","copyToClipboard","copyText","selBox","document","createElement","style","position","left","top","opacity","appendChild","focus","select","execCommand","removeChild","getPersistentLink","persistent_id","form_title","patient_id","FilledForms","_responses","handleInput","responseID","responses","qidToQuestionMapping","form_id","then","responsesURL","queryParameters","queryStringBuilder","responseLoaded","queryString","FormUpload","fileInput","handleUpload","current","files","postFile","patchFile","createRef","accept","Boolean","hostname","match","routing","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cac7817.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Question.css\"\n\ninterface QuestionComponentState {\n    answer: any\n    type: string\n}\n\ninterface QuestionComponentProps {\n    title: string\n    multipleChoice: boolean\n    choices: string[]\n    className: string\n    qID: number\n    controlQID: number\n    response_type: string\n}\n\nexport default class QuestionComponent extends React.Component<\n    QuestionComponentProps,\n\tQuestionComponentState\n> { \n    _radioButtons: any = []\n\n    public static defaultProps = {\n        choices: [],\n        className: \"\",\n        controlQID: -1,\n        response_type: \"string\"\n    }\n\n    constructor(props: QuestionComponentProps) {\n        super(props)\n\n        let type = \"\"\n        switch(this.props.response_type) {\n            case \"integer\":\n                type = \"number\"\n                break\n            case \"date\":\n                type = \"date\"\n                break\n            default:\n                type = \"string\"\n        }\n\n        const answer = {\n            \"qID\": this.props.qID,\n            \"response\": \"unanswered\"\n        }\n        \n        this.state = {\n            answer,\n            type\n        }\n    }\n\n    public getAnswer = () => {\n        return this.state.answer\n    }\n\n    private renderMultipleChoice = () => {\n        let renderedChoices: any = []\n        this.props.choices.forEach((choice, key) => {\n            if (typeof choice === 'string') { // temporary for p1, will fix later\n                renderedChoices.push(\n                    <div className=\"question-div\">\n                        <input \n                            ref={(c) => this._radioButtons.push(c)}\n                            type=\"radio\" \n                            value={choice}\n                            onChange={this.onRadioButtonSelect}\n                            key={key}\n                            className='radiobutton'\n                        />\n                        <label\n                            className='inputfield text'\n                        >\n                            {choice}\n                        </label>\n                    </div>\n                )\n            }\n        })\n        return renderedChoices\n    }\n\n    private renderInputField = () => {\n        return (\n            <input \n                type={this.state.type}\n                onChange={this.onTextFieldChange}\n                className='inputfield'\n            />\n        )\n    }\n\n    private onRadioButtonSelect = (event) => {\n        this._radioButtons.forEach((button) => {\n            if (button !== event.target && button != null) {\n                button.checked = false\n            }\n        })\n\n        const answer = {\n            \"qID\": this.props.qID,\n            \"response\": event.target.value\n        }\n\n        this.setState({ answer })\n    }\n\n    private onTextFieldChange = (event) => {\n        const answer = {\n            \"qID\": this.props.qID,\n            \"response\": event.target.value\n        }\n\n        this.setState({ answer })\n    }\n\n    public render() {\n        return (\n            <div className={this.props.className}>\n                <h4 className='text title'>{this.props.title}</h4>\n                {this.props.multipleChoice ? \n                    this.renderMultipleChoice() : this.renderInputField()\n                }\n                <div className=\"children\">\n                    {(this.state.answer.response === \"unanswered\") ?\n                        <div/> : this.props.children\n                    }\n                </div>\n            </div>\n        )\n    }\n\n}","import React, { Component } from \"react\";\nimport QuestionComponent from \"./QuestionComponent\"\nimport \"../styles/Question.css\"\n\ninterface FormComponentState {\n    answers: any\n}\n\ninterface FormComponentProps {\n    questionData: any\n    title: string\n    className: string\n}\n\ninterface QuestionData {\n    question: string\n    multiple_choice: boolean\n    single_answer: boolean\n    response_type: string\n    response_units: string\n    response_field: string\n    list_field: string[]\n}\n\nexport default class FormComponent extends Component<FormComponentProps, FormComponentState> {\n    _questions: any = []\n\n    public static defaultProps = {\n        className: \"\",\n        title: \"\"\n    }\n\n    constructor(props: FormComponentProps) {\n        super(props)\n        this.state = {\n            answers: {}\n        }\n    }\n\n    private findControlQuestion = (qID: number) => {\n        let controlData = {}\n\n        this.props.questionData.forEach(data => {\n            if (data.qid === qID) {\n                controlData = data\n            }\n        })\n\n        return controlData\n    }\n\n    private buildForm = () => {\n        const questions: any = []\n\n        this.props.questionData.forEach((data, key) => {\n            if (data.control_qid !== -1) {\n                const controlData: any = this.findControlQuestion(data.control_qid)\n                questions.push(\n                    <QuestionComponent\n                        title={data.question}\n                        qID={data.qid}\n                        multipleChoice={data.multiple_choice}\n                        choices={data.list_field}\n                        controlQID={data.control_qid}\n                        key={key}\n                        ref={(c) => this._questions.push(c)}\n                    >\n                        <QuestionComponent\n                            title={controlData.question}\n                            qID={controlData.qid}\n                            multipleChoice={controlData.multiple_choice}\n                            choices={controlData.list_field}\n                            ref={(c) => this._questions.push(c)}\n                        />\n                    </QuestionComponent>\n                )\n            } else {\n                questions.push(\n                    <QuestionComponent\n                        title={data.question}\n                        qID={data.qid}\n                        multipleChoice={data.multiple_choice}\n                        choices={data.list_field}\n                        key={key}\n                        ref={(c) => this._questions.push(c)}\n                        response_type={data.response_type}\n                    />   \n                )\n            }\n        });\n\n        return questions\n    }\n\n    public getAnswers = () => {\n        const answerObjs: any = []\n        \n        this._questions.forEach(question => {\n            answerObjs.push(question.getAnswer())\n        });\n\n        return answerObjs\n    }\n\n    public render() {\n        return(\n            <div className={this.props.className}>\n                <h2 className=\"text\">{this.props.title}</h2>\n                {this.buildForm()}\n            </div>\n        )\n    }\n}","export default class HTTPHelper {\n\n    /**\n     * Sends a GET request to the specified url and returns the response JSON.\n     * \n     * @param url the url to send the GET request to\n     */\n    public static async get(url: string) {\n        try {\n            const response = await fetch(url)\n            const data = await response.json()\n            return data\n        } catch(e) {\n            console.error(e)\n        }\n    }\n\n    public static async postJSON(url: string, postBody: any) {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            const response = await fetch(url, {\n                headers: myHeaders,\n                method: \"POST\",\n                body: JSON.stringify(postBody)\n            })\n\n            return response\n        } catch(e) {\n            console.error(e)\n        }\n    }\n\n    public static async postFile(url: string, file: File) {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/xml\")\n\n            const response = await fetch(url, {\n                headers: myHeaders,\n                method: \"POST\",\n                body: file\n            })\n\n            return await response.json()\n        } catch(e) {\n            console.error(e)\n        }\n    }\n\n    public static async patchFile(url: string, file: File) {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/xml\")\n\n            const response = await fetch(url, {\n                headers: myHeaders,\n                method: \"PATCH\",\n                body: file\n            })\n\n            return await response.json()\n        } catch(e) {\n            console.error(e)\n        }\n    }\n}","const SERVER_URL = \"http://127.0.0.1:5000/api/v1\"\n\nconst URLS = {\n    \"Fill Form\": \"/\",\n    \"View Patient Forms\": \"/filledforms\",\n    \"Upload Form\": \"/formupload\"\n}\n\nconst Constants = {\n    \"SERVER_URL\": SERVER_URL,\n    \"URLS\": URLS\n}\n\nexport default Constants","import React, { Component } from \"react\";\nimport FormComponent from \"./FormComponent\"\nimport \"../styles/Question.css\"\nimport HTTPHelper from \"../helpers/http\"\nimport Constants from \"../constants/Constants\"\n\ninterface FormState {\n    title: string\n    patientID: string\n}\n\ninterface FormProps {\n    formData: any\n}\n\nexport default class Form extends Component<FormProps, FormState> {\n    _formJSX: any = []\n    _formRefs: any= []\n\n    constructor(props: FormProps) {\n        super(props)\n        this.state = {\n            title: \"\",\n            patientID: \"\"\n        }\n    }\n\n    public componentWillMount = () => {\n        const formBody = this.props.formData.body\n\n        console.log(this.props.formData)\n        \n        if (formBody.questions.length > 0) {\n            this._formJSX.push(\n                <FormComponent\n                    title={formBody.title}\n                    questionData={formBody.questions}\n                    ref={(c) => this._formRefs.push(c)}\n                />\n            )\n        }\n\n        formBody.sections.forEach(section => {\n            this.generateForm(section)\n        });\n\n        this.setState({ title: this.props.formData.title })\n    }\n\n    private answers = () => {\n        const answerObjs: any = []\n        \n        this._formRefs.forEach(form => {\n            answerObjs.push(...form.getAnswers())\n        });\n\n        const ret = {}\n        ret[\"children\"] = answerObjs\n        ret[\"form_id\"] = this.props.formData.id.toString()\n        ret[\"patient_id\"] = this.state.patientID\n        ret[\"created_ts\"] = new Date().getTime()\n        ret[\"form_title\"] = this.state.title\n        ret[\"version\"] = this.props.formData.body.version\n\n        return ret\n    }\n\n    public submitFormHandler = async (event) => {\n        event.preventDefault()\n        if (this.state.patientID === \"\") {\n            return\n        }\n\n        const url = `${Constants.SERVER_URL}/response/`\n        const answers = this.answers()\n\n        const response: any = await HTTPHelper.postJSON(url, answers)\n        if (response!.status !== 200) {\n            alert(\"Form not submitted\")\n        } else {\n            const responseBody = await response.json()\n            alert(`Successfully submitted form. The response ID is ${responseBody.data.response_id}.`)\n        }\n\n        window.location.reload(true)\n\t}\n\n    private generateForm = (sectionData) => {\n        this._formJSX.push(\n            <FormComponent\n                title={sectionData.title}\n                questionData={sectionData.questions}\n                ref={(c) => this._formRefs.push(c)}\n            />\n        )\n\n        if (sectionData.sections.length > 0) {\n            sectionData.sections.forEach(section => {\n                this.generateForm(section)\n            });\n            \n        }\n    }\n\n    private patientIDHandler = (event) => {\n        this.setState({patientID: event.target.value});\n    }\n\n\n    public render() {\n        return (\n            <div>\n                <form onSubmit={this.submitFormHandler}>\n                    <h1 className=\"text\">{this.state.title}</h1>\n                    <label className=\"text\">Patient ID</label>\n                    <input\n                        type='text'\n                        onChange={this.patientIDHandler}\n                        required\n                    />\n                    {this._formJSX}\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-light submit-button\"\n                    >\n                        Submit\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { RouteProps, Redirect} from \"react-router-dom\";\nimport \"./styles/App.css\";\nimport Form from \"./components/Form\"\nimport MOCK_FORM_DATA from \"./constants/MockData\"\nimport Constants from \"./constants/Constants\"\nimport HTTPHelper from \"./helpers/http\"\n\ninterface AppState {\n\tformData: any\n\tformID: number\n\tredirectURL: string\n}\n\nclass App extends React.Component<{} & RouteProps, AppState> {\n\tform: any = []\n\tconstructor(props: Readonly<RouteProps>) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tformData: null,\n\t\t\tformID: -1,\n\t\t\tredirectURL: \"\"\n\t\t};\n\t}\n\n\tprivate handleFormIDInput = (event) => {\n\t\tthis.setState({formID: event.target.value});\n\t}\n\n\tprivate showForm = () => {\n\t\tif (this.state.formData !== null) {\n\t\t\treturn (\n\t\t\t\t<div className=\"col-lg-12\">\n\t\t\t\t\t<Form\n\t\t\t\t\t\tformData={this.state.formData}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn <div/>\n\t}\n\n\tprivate getFormButtonHandler = async () => {\n\t\tif (this.state.formID === -1) {\n\t\t\talert(\"Please enter a form ID.\")\n\t\t\treturn\n\t\t}\n\n\t\tconst formURL = `${Constants.SERVER_URL}/xmlform/${this.state.formID}`\n\t\t\n\t\tconst formData: any = await HTTPHelper.get(formURL)\n\n\t\tif (formData.message) {\n\t\t\talert(\"Invalid form ID.\")\n\t\t\treturn\n\t\t}\n\n\t\tthis.setState({formData})\n\t}\n\n\tprivate showFormIDInput = () => {\n\t\tif (this.state.formData === null) {\n\t\t\treturn (\n\t\t\t\t<div className=\"col-lg-12\">\n\t\t\t\t\t<h3 className=\"text\">Enter Form ID</h3>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-text-input\"\n\t\t\t\t\t\tplaceholder=\"Form ID\"\n\t\t\t\t\t\tonChange={this.handleFormIDInput}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<button\n                        onClick={this.getFormButtonHandler}\n                        className=\"btn btn-light form-button-responses\"\n                    >\n                        Get Form\n                    </button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn <div/>\n\t}\n\n\tprivate handleNavigationButtons = (buttonLabel) => {\n\t\tconst url = Constants.URLS[buttonLabel]\n\t\tthis.setState({redirectURL: url})\n\t}\n\n\t  \n\tpublic render() {\n\t\tif (this.state.redirectURL !== \"\") {\n\t\t\treturn <Redirect push to={`${this.state.redirectURL}`} />\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid bg-dark App-background\">\n\t\t\t\t<div className=\"jumbotron bg-light jumbotron-style\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-offset-2 col-xs-8\">\n\t\t\t\t\t\t\t<h1 className=\"jumbotron-text\">SDCTools</h1>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => window.location.reload(true)}>Fill Form</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"View Patient Forms\")}>View Patient Forms</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"Upload Form\")}>Upload Form</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t{this.showFormIDInput()}\n\t\t\t\t\t{this.showForm()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App as React.ComponentType<any>;\n","import HTTPHelper from \"./http\"\nimport Constants from \"../constants/Constants\"\n\nexport default class QuestionMapper {\n    /**\n     * Returns an object mapping the qID of a question to the actual question.\n     * @param formID the ID of the form containing the questions\n     */\n    public static async qidToQuestionMapping(formID: any) {\n        const formData = await this.getForm(formID)\n        const formBody = formData.body\n\n        const mapping = {}\n\n        let questionData\n        for (questionData in formBody.questions) {\n            mapping[questionData.qid] = questionData.question\n        }\n\n        formBody.sections.forEach(sectionData => {\n            Object.assign(mapping, this.sectionMapper(sectionData))\n        })\n\n        return mapping\n    }\n\n    private static sectionMapper(sectionData: any) {\n        const mapping = {}\n\n        if (!sectionData) {\n            return\n        }\n\n        sectionData.questions.forEach(questionData => {\n            mapping[questionData.qid] = questionData.question\n        })\n\n        if (sectionData.sections.length > 0) {\n            sectionData.sections.forEach(data => {\n                Object.assign(mapping, this.sectionMapper(data))\n            })\n        }\n\n        return mapping\n    }\n\n    private static async getForm(formID: string) {\n        try {\n            const formURL = `${Constants.SERVER_URL}/xmlform/${formID}`\n            const formData: any = await HTTPHelper.get(formURL)\n            \n            return formData\n        } catch(e) {\n            console.error(e)\n        }\n        \n    }\n}","import React, { Component, Children } from \"react\";\nimport Constants from \"../constants/Constants\"\nimport HTTPHelper from \"../helpers/http\"\n\nimport \"../styles/App.css\"\n\ninterface FormResponseState {\n}\n\ninterface FormResponseProps {\n    formResponse: any,\n    questionMapping: any\n}\n\nexport default class FormResponse extends Component<FormResponseProps, FormResponseState> {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    private renderResponses = () => {\n        const children = this.props.formResponse.children\n        const _textComponents: any = []\n\n        children.forEach((child, key) => {\n            const qID = child.qID\n            _textComponents.push(\n                <p className=\"text response-text\" key={key}>\n                    <div className=\"response-key\">{`${this.props.questionMapping[qID]}`}</div>\n                    {` ${child.response}`}\n                </p>\n            )\n        })\n        \n        _textComponents.push(<br />)\n        return _textComponents\n    }\n\n    public copyToClipboard = (copyText: string) => {\n        const selBox = document.createElement('textarea');\n        selBox.style.position = 'fixed';\n        selBox.style.left = '0';\n        selBox.style.top = '0';\n        selBox.style.opacity = '0';\n        selBox.value = copyText;\n        document.body.appendChild(selBox);\n        selBox.focus();\n        selBox.select();\n        document.execCommand('copy');\n        document.body.removeChild(selBox);\n    };\n\n    public getPersistentLink = async (event) => {\n        event.preventDefault()\n\n        const url = `${Constants.SERVER_URL}/persistent_response/`\n\n        const response: any = await HTTPHelper.postJSON(url, this.props.formResponse)\n        if (response!.status !== 200) {\n            alert(\"Persistent link could not be fetched\")\n        } else {\n            const responseBody = await response.json()\n            let copyText = `${Constants.SERVER_URL}/persistent_response/` + \"?persistent_id=\" + responseBody.data.persistent_id;\n            this.copyToClipboard(copyText);\n            alert(`Copied persistent link to clipboard. The persistence ID is ${responseBody.data.persistent_id}.`)\n        }\n    }\n    \n    \n    public render() {\n        return (\n            <div>\n                <p className=\"text response-title\">{`Form Title: ${this.props.formResponse.form_title}`}</p>\n                <p className=\"text response-title\">{`Response ID: ${this.props.formResponse.response_id}`}</p>\n                <p className=\"text response-title\">{`Patient ID: ${this.props.formResponse.patient_id}`}</p>\n                <button type=\"submit\" className=\"btn btn-light submit-button\" onClick={this.getPersistentLink}> Share </button>\n                {this.renderResponses()}\n            </div>\n        )\n    }\n\n}","import React from \"react\";\nimport { Redirect, RouteProps} from \"react-router-dom\";\nimport \"./styles/App.css\";\nimport Form from \"./components/Form\"\nimport MOCK_FORM_DATA from \"./constants/MockData\"\nimport Constants from \"./constants/Constants\"\nimport HTTPHelper from \"./helpers/http\"\nimport QuestionMapper from \"./helpers/QuestionMapper\"\nimport FormResponse from \"./components/FormResponse\"\n\ninterface FilledFormsState {\n\tformData: any\n\tformID: string\n\tpatientID: string\n\tresponseID: string\n\tredirectURL: string\n\tresponseLoaded: boolean\n}\n\nclass FilledForms extends React.Component<{} & RouteProps, FilledFormsState> {\n\t_responses: any = []\n\tconstructor(props: Readonly<RouteProps>) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tformData: null,\n\t\t\tformID: \"\",\n\t\t\tpatientID: \"\",\n\t\t\tresponseID: \"\",\n\t\t\tredirectURL: \"\",\n\t\t\tresponseLoaded: false\n\t\t};\n\t}\n\n\tprivate handleInput = (event: any, type: string) => {\n\t\tswitch(type) {\n\t\t\tcase \"patientID\":\n\t\t\t\tthis.setState({patientID: event.target.value})\n\t\t\t\tbreak\n\t\t\tcase \"formID\":\n\t\t\t\tthis.setState({formID: event.target.value})\n\t\t\t\tbreak\n\t\t\tcase \"responseID\":\n\t\t\t\tthis.setState({responseID: event.target.value})\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tprivate showForm = async () => {\n\t\tif (this.state.formData !== null) {\n\t\t\tconst data = this.state.formData.data.responses\n\n\t\t\tif (data.length === 0) {\n\t\t\t\treturn <text className=\"text\">No Responses</text>\n\t\t\t}\n\t\t\t\n\t\t\tlet response\n\t\t\tfor (response of data) {\n\t\t\t\tconst questionMapping = await QuestionMapper.qidToQuestionMapping(response.form_id).then()\n\n\t\t\t\tthis._responses.push(\n\t\t\t\t\t<FormResponse\n\t\t\t\t\t\tformResponse={response}\n\t\t\t\t\t\tquestionMapping={questionMapping}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n    }\n    \n    private handleNavigationButtons = (buttonLabel) => {\n\t\tconst url = Constants.URLS[buttonLabel]\n\t\tthis.setState({redirectURL: url})\n\t}\n\n\tprivate getFormButtonHandler = async () => {\n\t\tif (this.state.formID === \"\" &&\n\t\t\tthis.state.patientID === \"\" &&\n\t\t\tthis.state.responseID === \"\") {\n\t\t\talert(\"Please enter a response ID or use the search option.\")\n\t\t\treturn\n\t\t}\n\t\t\n\t\tlet responsesURL = `${Constants.SERVER_URL}/response/?`\n\n\t\tconst queryParameters = this.queryStringBuilder()\n\t\tresponsesURL += queryParameters\n\t\t\n\t\tconst formData: any = await HTTPHelper.get(responsesURL)\n\n\t\tif (formData.message === \"No responses found!\") {\n\t\t\talert(\"No responses found with the specified parameters.\")\n\t\t\twindow.location.reload(true)\n\t\t\treturn\n\t\t}\n\n\t\tthis.setState({formData})\n\t\tthis.showForm().then(() => this.setState({responseLoaded: true}))\n\t}\n\n\tprivate queryStringBuilder = () => {\n\t\tlet queryString = \"\"\n\t\tif (this.state.responseID !== \"\") {\n\t\t\tqueryString = `response_id=${this.state.responseID}`\n\t\t\treturn queryString\n\t\t}\n\n\t\tif (this.state.formID !== \"\" && this.state.patientID !== \"\") {\n\t\t\tqueryString =`patient_id=${this.state.patientID}&form_id=${this.state.formID}`\n\t\t} else if (this.state.formID !== \"\") {\n\t\t\tqueryString = `form_id=${this.state.formID}`\n\t\t} else if (this.state.patientID !== \"\") {\n\t\t\tqueryString =`patient_id=${this.state.patientID}`\n\t\t}\n\n\t\treturn queryString\n\t}\n\n\tprivate showFormIDInput = () => {\n\t\tif (this.state.formData === null) {\n\t\t\treturn (\n\t\t\t\t<div className=\"col-lg-12\">\n\t\t\t\t\t<h2 className=\"text\">Response Searcher</h2>\n\t\t\t\t\t<label className=\"text\">Enter the Response ID</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-text-input response-id-input\"\n\t\t\t\t\t\tonChange={(event) => this.handleInput(event, \"responseID\")}\n\t\t\t\t\t\tplaceholder={\"Response ID\"}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 className=\"text\">OR</h1>\n\t\t\t\t\t<label className=\"text\">Search by Patient ID and Form ID</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-text-input\"\n\t\t\t\t\t\tonChange={(event) => this.handleInput(event, \"patientID\")}\n\t\t\t\t\t\tplaceholder={\"Patient ID\"}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-text-input\"\n\t\t\t\t\t\tonChange={(event) => this.handleInput(event, \"formID\")}\n\t\t\t\t\t\tplaceholder={\"Form ID\"}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<button\n                        onClick={this.getFormButtonHandler}\n                        className=\"btn btn-light form-button-responses\"\n                    >\n                        Get Responses\n                    </button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn <div/>\n\t}\n\n\t  \n\tpublic render() {\n        if (this.state.redirectURL !== \"\") {\n            return <Redirect push to={`${this.state.redirectURL}`} />\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid bg-dark App-background\">\n\t\t\t\t<div className=\"jumbotron bg-light jumbotron-style\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-offset-2 col-xs-8\">\n\t\t\t\t\t\t\t<h1 className=\"jumbotron-text\">SDCTools</h1>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"Fill Form\")}>Fill Form</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => window.location.reload(true)}>View Patient Forms</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"Upload Form\")}>Upload Form</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t{this.showFormIDInput()}\n\t\t\t\t\t{this.state.responseLoaded ? this._responses : <div/>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FilledForms as React.ComponentType<any>;\n","import React from \"react\";\nimport { RouteProps, Redirect} from \"react-router-dom\";\nimport \"./styles/App.css\";\nimport Constants from \"./constants/Constants\"\nimport HTTPHelper from \"./helpers/http\"\n\ninterface FormUploadState {\n\tformData: any\n\tformID: number\n\tredirectURL: string\n}\n\nclass FormUpload extends React.Component<{} & RouteProps, FormUploadState> {\n\tform: any = []\n\tfileInput: any\n\tconstructor(props: Readonly<RouteProps>) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tformData: null,\n\t\t\tformID: -1,\n\t\t\tredirectURL: \"\"\n\t\t};\n\t\tthis.fileInput = React.createRef()\n\t}\n\n\tprivate handleNavigationButtons = (buttonLabel) => {\n\t\tconst url = Constants.URLS[buttonLabel]\n\t\tthis.setState({redirectURL: url})\n\t}\n\n\tprivate handleUpload = async (type: string) => {\n\t\tconst url: string = `${Constants.SERVER_URL}/new_xml/`\n\t\tconst file: File = this.fileInput.current.files[0]\n\n\t\tif (!file) {\n\t\t\talert(\"Please choose a file to upload.\")\n\t\t\treturn\n\t\t} else if (type === \"new\") {\n\t\t\tconst response: any = await HTTPHelper.postFile(url, file)\n\n\t\t\tif (response && response.id) {\n\t\t\t\talert(`Successfully added new form. New form ID is ${response.id}.`)\n\t\t\t} else if (response && response.message) {\n\t\t\t\talert(\"This form is already in the database. If you would like to update it, please use the \\\"Update Existing\\\" option.\")\n\t\t\t} else {\n\t\t\t\talert(\"Unable to upload form.\")\n\t\t\t}\n\t\t} else if (type === \"update\") {\n\t\t\tconst response: any = await HTTPHelper.patchFile(url, file)\n\n\t\t\tif (response) {\n\t\t\t\talert(`Successfully updated form ${response.id}.`)\n\t\t\t} else {\n\t\t\t\talert(\"Unable to upload form.\")\n\t\t\t}\n\t\t}\n\t\twindow.location.reload(true)\n\t}\n\n\t  \n\tpublic render() {\n\t\tif (this.state.redirectURL !== \"\") {\n            return <Redirect push to={`${this.state.redirectURL}`} />\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid bg-dark App-background\">\n\t\t\t\t<div className=\"jumbotron bg-light jumbotron-style\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-offset-2 col-xs-8\">\n\t\t\t\t\t\t\t<h1 className=\"jumbotron-text\">SDCTools</h1>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"Fill Form\")}>Fill Form</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => this.handleNavigationButtons(\"View Patient Forms\")}>View Patient Forms</button>\n\t\t\t\t\t\t\t<button className=\"navigation-button btn btn-secondary\" onClick={() => window.location.reload(true)}>Upload Form</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input required className=\"file-input\" accept=\".xml\" type=\"file\" ref={this.fileInput} />\n\t\t\t\t\t\t<br />\n        \t\t\t\t<button onClick={() => this.handleUpload(\"new\")} className=\"file-upload-submit-btn btn btn-light\" type=\"button\">Add New</button>\n        \t\t\t\t<button onClick={() => this.handleUpload(\"update\")} className=\"file-upload-submit-btn btn btn-success\" type=\"button\">Update Existing</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FormUpload as React.ComponentType<any>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport FilledForms from \"./FilledForms\"\nimport FormUpload from \"./FormUpload\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst routing = (\n\t<Router>\n\t\t<div>\n\t\t\t<Route exact path=\"/\" component={App} />\n\t\t\t<Route exact path=\"/filledforms\" component={FilledForms} />\n\t\t\t<Route exact path=\"/formupload\" component={FormUpload} />\n\t\t</div>\n\t</Router>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}